#!/bin/bash
#
# 2014/03/26 Gabriel Moreau <Gabriel Moreau(A)univ-grenoble-alpes.fr> - Initial release
#
# Originally from http://hd-recording.at/dokuwiki/doku.php?id=linux:tmux#tssh

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
export LANG=C

VERSION='0.4.7'

function usage() {
   cat <<END_USAGE
tssh - tmux cluster ssh

 tssh [--window|-w number] [--fast|-f] [--help|-h] [--parallel|-p] [--ping|-i] [--telnet|-t] [--verbose|-v] [--log|-l log_file] [--delay|-d delay_time] [--command|-c remote_cmd] [--ssh-option|-o ssh_option] <host1> <host2> <clusterssh class>... <hostM>- <hostN>+

   -w window      number of windows to open (integer, default 16)
   -o ssh_option  option to pass to ssh
   -f             fast, no nmap scan to eliminate sleeping computer
   -v             verbose
   -d delay_time  delay between parallel connexion to remote host
   -c remote_cmd  launch the remote command on hosts and exit
   -p             launch in parallel (only with -c) with command parallel or xargs
   -i             just ping, no ssh
   -t             use telnet instead of ssh
   -h             help
   -l log_file    verbose in log file and test ssh key

VERSION ${VERSION}
END_USAGE
   }

OPT_SHORT=w:o:d:c:fvl:pith
OPT_LONG=window:,ssh-option:,delay:,command:,fast,verbose,log:,parallel,ping,telnet,help
OPT_PARSED=$(getopt --options $OPT_SHORT --longoptions $OPT_LONG --name "$0" -- "$@")
if [[ $? -ne 0 ]]
then
    usage
    exit 2
fi
eval set -- "${OPT_PARSED}"

export delay_time=0.8
export remote_command=''
export ssh_option=''
export ssh_port=22 # ssh default port
export ssh_cmd=ssh
export split_number=16
if which tput > /dev/null
then
   export split_number=$(( ($(tput  lines)/ 10) * ($(tput  cols)/ 40) ))
fi

export dyn_domain=''
if [ -e "${HOME}/.config/tssh/config.sh" ]
then
   . "${HOME}/.config/tssh/config.sh"
elif [ -e "${HOME}/.tsshrc" ]
then
   . "${HOME}/.tsshrc"
fi

# get options
while true
do
   case "$1" in
      -w|--window)
         if echo $2 | egrep -q '^[[:digit:]]+$' && [ $2 -gt 0 ]
         then
            export split_number=$2
            shift 2
         else
            usage
            exit 4
         fi
         ;;
      -d|--delay)
         if echo $2 | egrep -q '^[[:digit:]]+$' && [ $2 -gt 0 ]
         then
            export delay_time=$2
            shift 2
         else
            usage
            exit 5
         fi         
         ;;
      -c|--command)
         if echo $2 | egrep -q '[[:alpha:]]'
         then
            export remote_command=$2
            shift 2
         else
            usage
            exit 6
         fi         
         ;;
      -p|--parallel)
         export parallel='yes'
         shift
         ;;
      -i|--ping)
         export ssh_cmd=ping
         export ssh_option=''
         shift
         ;;
      -t|--telnet)
         export ssh_cmd=telnet
         export ssh_option=''
         export ssh_port=23 # telnet default port
         shift
         ;;
      -o|--ssh-option)
         if echo $2 | egrep -q '[[:alpha:][:digit:]]'
         then
            export ssh_option=$2
            shift 2
         else
            usage
            exit 7
         fi
         ;;
      -f|--fast)
         export fast='yes'
         shift
         ;;
      -v|--verbose)
         export verbose='yes'
         shift
         ;;
      -l|--log)
         if echo $2 | egrep -q '^/'
         then
            export log_file=$2
         else
            export log_file="${PWD}/$2"
         fi
         shift 2
         ;;
      --)
         shift
         break
         ;;
      -h|--help|*)
         usage
         exit 3
         ;;
   esac
done

# need a computer or more
if [ $# -eq 0 ]; then usage; exit 8; fi 

[ -n "${log_file}" ] && echo "Info: begin tssh" >> "${log_file}"

# hash table
declare -A ghkey

get_host_list () {
   local default_mode=''

   # set local mode
   if echo $1 | grep -q -- ^--mode=
   then
      default_mode=$(echo $1 | grep -- ^--mode= | cut -f 2 -d '=')
      shift
   fi

   for host in $*
   do
      local mode=${default_mode}
      local last_char="${host: -1}"
      if [ "${last_char}" == "-" -o "${last_char}" == "+" ]
      then
         mode="${last_char}"
         host="${host:0:${#host}-1}"
      fi

      # short host without login part if any
      local justhost=${host#*@}
      
      local cluster=$(grep "^${justhost}\b" ${HOME}/.csshrc | cut -f 2 -d '=' | sed -e 's/^[[:space:]]*//;')
      if [ "${cluster}" == "" ]
      then
         # just a host to scan and add
         if [ "${fast}" != 'yes' -a "${mode}" != '-' ]
         then
            # test if exists host
            if host ${justhost} | grep -q 'not found'
            then
               [ "${verbose}" == 'yes' ] && echo "Warning: ${justhost} does not exists"
               [ -n "${log_file}" ]      && echo "Warning: ${justhost} does not exists" >> "${log_file}"
               continue
            fi
            if ! nmap -p ${ssh_port} -sT -PN ${justhost} | grep -q '\bopen\b'
            then
               if host ${justhost}.${dyn_domain} | grep -q 'not found' || ! nmap -p ${ssh_port} -sT -PN ${justhost}.${dyn_domain} | grep -q '\bopen\b'
               then
                  [ "${verbose}" == 'yes' ] && echo "Warning: ${justhost} is down"
                  [ -n "${log_file}" ]      && echo "Warning: ${justhost} is down" >> "${log_file}"
                  continue
               else
                  [ "${verbose}" == 'yes' ] && echo "Warning: remove ssh key of ${justhost}.${dyn_domain}"
                  [ -n "${log_file}" ]      && echo "Warning: remove ssh key of ${justhost}.${dyn_domain}" >> "${log_file}"
                  host=${host}.${dyn_domain}
                  ssh-keygen -q -R $(LANG=C host ${justhost}.${dyn_domain} | awk '{print $4}')
               fi
            fi
         fi
         [ "${verbose}" == 'yes' ] && echo "Warning: add ${host} on list with mode ${mode}"
         [ -n "${log_file}" ]      && echo "Warning: add ${host} on list with mode ${mode}" >> "${log_file}"
         ghkey["master${mode}"]=${ghkey["master${mode}"]}" ${host} "
      else
         # cluster, jump in a recursive mode
         [ "${verbose}" == 'yes' ] && echo "Warning: recursive call for cluster ${justhost} (${cluster}), with mode ${mode}"
         [ -n "${log_file}" ]      && echo "Warning: recursive call for cluster ${justhost} (${cluster}), with mode ${mode}" >> "${log_file}"
         get_host_list --mode=${mode} "${cluster}"
      fi
   done
   }
declare -fx get_host_list

get_host_list $@
ghkey["master"]=${ghkey["master"]}${ghkey["master+"]}
for f in ${ghkey["master-"]}
do
   echo " "${ghkey["master+"]}" " | grep "[[:space:]]${f}[[:space:]]" && continue
   ghkey["master--"]=${ghkey["master--"]}" ${f} "
done
for f in ${ghkey["master"]}
do
   echo " "${ghkey["master--"]}" " | grep "[[:space:]]${f}[[:space:]]" && continue
   ghkey["master++"]=${ghkey["master++"]}" ${f} "
done

# array
array_host=($(echo ${ghkey["master++"]} | tr ' ' '\n' | sort -u))

if [ "${parallel}" == 'yes' -a -n "${remote_command}" ]
then
   if parallel --version 2> /dev/null | grep -q ^'GNU parallel'
   then
      printf "%s\n" "${array_host[@]}" | parallel -j ${split_number} -I {} -- "${ssh_cmd} ${ssh_option} {} ${remote_command}"
   else
      printf "%s\n" "${array_host[@]}" | xargs -r -n 1 -P ${split_number} -I {} -- ${ssh_cmd} ${ssh_option} {} "${remote_command}"
   fi   

   exit 0
fi

# wait is needed by time tmux session open and ssh time connection
first_delay_time=0
other_delay_time=0
if [ -n "${remote_command}" ]
then
   # add delay time after remote command
   other_delay_time=${delay_time}
   first_delay_time="${delay_time} ${other_delay_time}"
fi

session='unknown'
for index in ${!array_host[@]}
do
   subindex=$(((${index} % ${split_number}) + 1))
   serie=$(((${index} / ${split_number}) + 1))

   if [ "${verbose}" == 'yes' ]
   then
      echo "Info: host serie ${serie} sub ${subindex} / ${split_number} : ${array_host[${index}]}"
   fi
   if [ -n "${log_file}" ]
   then
      echo "Info: host serie ${serie} sub ${subindex} / ${split_number} : ${array_host[${index}]}" >> "${log_file}"
      echo "Info: test ssh key on ${array_host[${index}]}" >> "${log_file}"
      ssh -o 'PasswordAuthentication no' -F /dev/null ${array_host[${index}]} exit 2>&1 | grep -v '^Permission denied (publickey,password).' >> "${log_file}"
   fi

   if [ ${subindex} -eq 1 ]
   then
      # First host of the series
      session=$(shuf -n 1 /usr/share/dict/words | tr -cd "[:alpha:]")

      tmux -2 new-session -d -s ${session} "${ssh_cmd} ${ssh_option} ${array_host[${index}]} ${remote_command}; sleep ${first_delay_time}"
      # wait ${delay_time} second to let new session start...
      sleep ${delay_time}
      while (true)
      do
         if tmux list-sessions | grep "^${session}:"
         then
            break
         fi
         tmux -2 new-session -d -s ${session} "${ssh_cmd} ${ssh_option} ${array_host[${index}]} ${remote_command}; sleep ${first_delay_time}"
         sleep ${delay_time}
      done
   else
      tmux splitw -t ${session} "${ssh_cmd} ${ssh_option} ${array_host[${index}]} ${remote_command}; sleep ${other_delay_time}"
      tmux select-layout tiled > /dev/null
   fi

   if [ ${subindex} -eq ${split_number} -o $((${index} + 1 )) -eq ${#array_host[@]} ]
   then
      # Last of the series
      tmux set-window-option synchronize-panes on  > /dev/null
      tmux set-window-option -g utf8 on            > /dev/null
      tmux set -g default-terminal screen-256color > /dev/null
      #tmux set-option -g set-clipboard on
 
      # Sane scrolling
      #tmux set -g mode-mouse on
      #tmux set -g mouse-resize-pane on
      #tmux set -g mouse-select-pane on
      #tmux set -g mouse-select-window on
 
      #set -g terminal-overrides 'xterm*:smcup@:rmcup@'
 
      # toggle mouse mode to allow mouse copy/paste
      # set mouse on with prefix m
      tmux bind m \
         set -g mode-mouse on \; \
         set -g mouse-select-pane on \; \
         display 'Mouse: ON' > /dev/null
         # set -g mouse-resize-pane on \; \
         #set -g mouse-select-window on \; \
      # set mouse off with prefix M
      tmux bind M \
         set -g mode-mouse off \; \
         set -g mouse-select-pane off \; \
         display 'Mouse: OFF' > /dev/null
         #set -g mouse-resize-pane off \; \
         #set -g mouse-select-window off \; \
      # toggle Broadcast
      tmux bind b set-window-option synchronize-panes

      if [ "${verbose}" == 'yes' ]
      then
         echo "Info: attach session: $session"
      fi
      tmux attach -t ${session}
   fi
done

[ -n "${log_file}" ] && echo "Info: end tssh" >> "${log_file}"

exit


################################################################
# Documentation in POD format (like Perl)
################################################################

=head1 NAME

tssh - tmux cluster ssh

=head1 SYNOPSIS

 tssh [--window|-w number] [--fast|-f] [--help|-h] [--parallel|-p] [--ping|-i] [--telnet|-t] [--verbose|-v] [--log|-l log_file] [--delay|-d delay_time] [--command|-c remote_cmd] [--ssh-option|-o ssh_option] <host1> <host2> <clusterssh class>... <hostM>- <hostN>+

=head1 DESCRIPTION

C<tssh> can be use to launch terminal on many computer in parallel with C<tmux>
multiplexer and C<ssh>.
The tmux windows is splitted automatically.
If you need more computers on the same windows, you can zoom in and out
under gnome terminal with C<Ctrl-> or C<Ctrl+>.
This must be done before launching C<tssh>.

On the command line, you can put C<host>, C<login@host>, C<clusterssh class>.
A host or a class can be remove from the list with a dash append
and force to be in this one with a plus append.

See some L</EXAMPLES> below.

The control command for C<tmux> is C<Ctrl^b>.
You can switch from broadcast to a local machine with C<Ctrl^b Ctrl^b>
and move between machine with C<Ctrl^b ArrowKey>.


=head1 OPTIONS

=head2 C<-w number> 

Number of windows to open per panel (integer, default 16).

=head2 C<-o ssh_option>

Option to pass to C<ssh>

=head2 C<-f>

Fast, no C<map> is done in order to scan and eliminate sleeping computer.

=head2 C<-d delay_time>

When use C<tmux> context,
add a small delay in second before lauching the second shell
to let C<tmux> the time to open the window (default 0.8).

=head2 C<-c remote_cmd>

Launch the remote command on hosts and exit.

=head2 C<-p>

Launch in parallel (only with option C<-c>) with command C<parallel> or C<xargs>.

=head2 C<-i>

No C<ssh>, just C<ping> host.

=head2 C<-t>

Use C<telnet> instead of C<ssh>.

=head2 C<-v>

Verbose.

=head2 C<-l log_file>

Like verbose but append message in the F<log_file>.

=head2 C<-h>

Minimal help.


=head1 CONFIGURATION

The clusterssh config file F<~/.csshrc> is a key values file.
The "clusters" is mandatory for C<clusterssh> (not C<tssh>) and define the other keys.
Values could be computer list or other key...

 clusters = all server s1 s2 s3 node n1 n2 team switch
 all = server node team
 server = s1 s2
 node = n1 n2
 s1 = srv-mail srv-dns srv-imap
 s2 = srv-web srv-proxy
 n1 = node001 node002 node003 node004
 n2 = node101 node102 node103 node104
 team = pc01 pc06 laptop04 laptop05 laptop09
 switch = root@switch01 root@switch05 root@switch17

The C<tssh> config file (F<~/.config/tssh/config.sh>) can be use change the default parameters.

 #export delay_time=0.8
 #export split_number=16
 export dyn_domain='mycompagny.local'
 #export ssh_option=''
 #export ssh_port=22
 #export fast='yes'
 #export verbose='yes'

=head2 C<delay_time>

See option L<-d|/d-delay_time> above.

=head2 C<split_number>

See option L<-w|/w-number> above.

=head2 C<dyn_domain>

If the computer does not respond on its normal IP,
C<tssh> will also try to connect to this machine with this DNS domain extension.
This option can be used with a dynamic DNS domain in which the computer is automatically registered.
This is for example the case with an Active Directory.

=head2 C<ssh_option>

See option L<-o|/o-ssh_option> above.

=head2 C<fast>

See option L<-f|/f> above.

=head2 C<verbose>

See option L<-v|/v> above.


=head1 EXAMPLES

=over

=item * Example with the cluster ssh config above:

 tssh all team- node005 laptop04+

Is equivalent to:

 tssh srv-mail srv-dns srv-imap srv-web srv-proxy \\
   node001 node002 node003 node004 \\
   node101 node102 node103 node104 \\
   node005 laptop04

=item * Batch mode with C<tmux>

 tssh -c 'sudo apt-get update' all team

=item * Batch mode with C<parallel> or C<xargs> (without C<tmux>)

 tssh -c 'sudo apt-get update' -p all team

=item * Connexion without the ssh key

 tssh -o '-F /dev/null' all team

=back


=head1 DEPENDS

On Debian, you need the package

 apt-get install tmux ncurses-bin wamerican nmap

C<wamerican> (or C<wfrench>...) is used to choose a random word in the file F</usr/share/dict/words>
for each new tmux session.

C<ncurses-bin> is required for the C<tput> command
to automatically split your terminal into several small panels.
C<nmap> is only used for dynamic DNS domain and dynamic scan.
This is not mandatory for general use.

When it starts, C<tssh> uses C<tput> to find out the number of columns and rows in your terminal.
By default, it takes 10 rows and 40 columns for each window.
If C<tput> is not installed, the default is to divide the screen into 16 subwindows...


=head1 SEE ALSO

cluster-ssh, cssh, xargs, parallel, tmux

Own project ressources:

=over

=item * L<Web site|https://gricad-gitlab.univ-grenoble-alpes.fr/legi/soft/trokata/tssh>

=item * L<Online Manual|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/tssh/>

=item * L<Download package (Debian)|https://legi.gricad-pages.univ-grenoble-alpes.fr/soft/trokata/tssh/download/>

=back


=head1 AUTHORS

Written by Gabriel Moreau, Grenoble - France


=head1 COPYRIGHT

Copyright (C) 2014-2021, LEGI UMR 5519 / CNRS UGA G-INP, Grenoble, France
Licence : GNU GPL version 2 or later
